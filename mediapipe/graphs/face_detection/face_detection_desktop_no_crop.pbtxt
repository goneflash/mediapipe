# MediaPipe graph that performs hand detection on desktop with TensorFlow Lite
# on CPU.
# Used in the example in
# mediapipie/examples/desktop/hand_tracking:hand_detection_tflite.

# max_queue_size limits the number of packets enqueued on any input stream
# by throttling inputs to the graph. This makes the graph only process one
# frame per time.
max_queue_size: 1

# Decodes an input video file into images and a video header.
node {
  calculator: "OpenCvVideoDecoderCalculator"
  input_side_packet: "INPUT_FILE_PATH:input_video_path"
  output_stream: "VIDEO:input_video"
  output_stream: "VIDEO_PRESTREAM:input_video_header"
}

node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:input_video"
  output_stream: "IMAGE:transformed_face_image"
  output_stream: "LETTERBOX_PADDING:face_letterbox_padding"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 256
      output_height: 256
    }
  }
}

node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE:transformed_face_image"
  output_stream: "TENSORS:face_image_tensor"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteConverterCalculatorOptions] {
      zero_center: true
    }
  }
}

node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS:face_image_tensor"
  output_stream: "TENSORS:face_output_tensors"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      model_path: "mediapipe/models/gan.tflite"
    }
  }
}

node {
  calculator: "TfLiteTensorsToSegmentationCalculator"
  input_stream: "TENSORS:face_output_tensors"
  output_stream: "MASK:gan_output"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteTensorsToSegmentationCalculatorOptions] {
      tensor_width: 256
      tensor_height: 256
      tensor_channels: 3
    }
  }
}

node: {
  calculator: "ImageTransformationCalculator"
  #input_stream: "IMAGE:face_image"
  input_stream: "IMAGE:gan_output"
  output_stream: "IMAGE:output_video"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      #output_width: 1280
      #output_height: 720
      output_width: 178
      output_height: 218
    }
  }
}

# # Converts the detections to drawing primitives for annotation overlay.
# node {
#   calculator: "DetectionsToRenderDataCalculator"
#   input_stream: "DETECTIONS:output_detections"
#   output_stream: "RENDER_DATA:render_data"
#   node_options: {
#     [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
#       thickness: 4.0
#       color { r: 255 g: 0 b: 0 }
#     }
#   }
# }
# 
# # Draws annotations and overlays them on top of the input images.
# node {
#   calculator: "AnnotationOverlayCalculator"
#   input_stream: "INPUT_FRAME:input_video"
#   input_stream: "render_data"
#   output_stream: "OUTPUT_FRAME:output_video"
# }

# Encodes the annotated images into a video file, adopting properties specified
# in the input video header, e.g., video framerate.
node {
  calculator: "OpenCvVideoEncoderCalculator"
  input_stream: "VIDEO:output_video"
  input_stream: "VIDEO_PRESTREAM:input_video_header"
  input_side_packet: "OUTPUT_FILE_PATH:output_video_path"
  node_options: {
    [type.googleapis.com/mediapipe.OpenCvVideoEncoderCalculatorOptions]: {
      codec: "avc1"
      video_format: "mp4"
    }
  }
}
